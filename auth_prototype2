import sqlite3
import bcrypt
import time
from datetime import datetime, timedelta
import pyotp  # For two-factor authentication
import getpass  # To hide password input

# Role-based permissions
permissions = {
    "admin": ["read", "write", "delete"],
    "standard": ["read"]
}

# Session timeout (in seconds, e.g., 300 = 5 minutes)
SESSION_TIMEOUT = 300

# Database setup
def setup_database():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            password_hash BLOB,
            role TEXT,
            session_expiry TEXT,
            otp_secret TEXT
        )
    ''')
    # Insert default admin user if not exists
    cursor.execute("SELECT COUNT(*) FROM users WHERE username = 'admin_user'")
    if cursor.fetchone()[0] == 0:
        admin_hash = bcrypt.hashpw("admin123".encode('utf-8'), bcrypt.gensalt())
        cursor.execute("INSERT INTO users (username, password_hash, role, otp_secret) VALUES (?, ?, ?, ?)",
                       ("admin_user", admin_hash, "admin", pyotp.random_base32()))
    conn.commit()
    conn.close()

# Function to hash password
def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

# Function to verify password
def verify_password(password, hashed):
    return bcrypt.checkpw(password.encode('utf-8'), hashed)

# Function to generate and verify OTP (Two-Factor Authentication)
def generate_otp(secret):
    totp = pyotp.TOTP(secret)
    return totp.now()

def verify_otp(secret, user_otp):
    totp = pyotp.TOTP(secret)
    return totp.verify(user_otp)

# Check if session is still active
def is_session_active(session_expiry):
    if session_expiry is None:
        return False
    return datetime.fromisoformat(session_expiry) > datetime.now()

# Register a new user
def register(username, password, role="standard"):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM users WHERE username = ?", (username,))
    if cursor.fetchone():
        conn.close()
        return False, "Username already exists"
    
    password_hash = hash_password(password)
    otp_secret = pyotp.random_base32()
    cursor.execute("INSERT INTO users (username, password_hash, role, otp_secret) VALUES (?, ?, ?, ?)",
                   (username, password_hash, role, otp_secret))
    conn.commit()
    conn.close()
    return True, f"User {username} registered successfully with role {role}"

# Login function with authentication and TFA
def login(username, password, use_tfa=False):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT password_hash, role, otp_secret FROM users WHERE username = ?", (username,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        return False, "User not found"
    
    password_hash, role, otp_secret = result
    
    if not verify_password(password, password_hash):
        conn.close()
        return False, "Incorrect password"
    
    if use_tfa:
        otp = generate_otp(otp_secret)
        print(f"OTP sent: {otp}")  # In real app, send via email/SMS
        user_otp = input("Enter OTP: ")
        if not verify_otp(otp_secret, user_otp):
            conn.close()
            return False, "Invalid OTP"
    
    expiry = (datetime.now() + timedelta(seconds=SESSION_TIMEOUT)).isoformat()
    cursor.execute("UPDATE users SET session_expiry = ? WHERE username = ?", (expiry, username))
    conn.commit()
    conn.close()
    return True, f"Logged in as {username} (Role: {role})"

# Check permissions for a role
def check_permission(username, action):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT role, session_expiry FROM users WHERE username = ?", (username,))
    result = cursor.fetchone()
    conn.close()
    if not result or not is_session_active(result[1]):
        return False, "Session expired or user not logged in"
    
    role = result[0]
    if action in permissions.get(role, []):
        return True, f"Permission granted for {action}"
    return False, "Permission denied"

# Logout function
def logout(username):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET session_expiry = NULL WHERE username = ?", (username,))
    if cursor.rowcount > 0:
        conn.commit()
        conn.close()
        return "Logged out successfully"
    conn.close()
    return "User not found"

# View all users (admin-only)
def view_all_users(current_user):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT role, session_expiry FROM users WHERE username = ?", (current_user,))
    result = cursor.fetchone()
    if not result or not is_session_active(result[1]):
        conn.close()
        return False, "Session expired or user not logged in"
    
    if result[0] != "admin":
        conn.close()
        return False, "Permission denied: Admins only"
    
    cursor.execute("SELECT username, role FROM users")
    users = cursor.fetchall()
    conn.close()
    user_list = "\n=== All Registered Users ===\n" + "\n".join(f"Username: {u[0]}, Role: {u[1]}" for u in users)
    return True, user_list

# Main execution
def module_one():
    setup_database()  # Initialize database
    print("=== User Authentication & Access Control ===")
    
    while True:
        print("\n1. Login\n2. Register\n3. Check Permission\n4. Logout\n5. View All Users (Admin Only)\n6. Exit")
        choice = input("Select an option: ")
        
        if choice == "1":
            username = input("Username: ")
            password = getpass.getpass("Password: ")
            use_tfa = input("Enable Two-Factor Authentication? (y/n): ").lower() == 'y'
            success, message = login(username, password, use_tfa)
            print(message)
        
        elif choice == "2":
            username = input("New Username: ")
            password = getpass.getpass("New Password: ")
            success, message = register(username, password, role="standard")
            print(message)
        
        elif choice == "3":
            username = input("Username: ")
            action = input("Action (read/write/delete): ")
            allowed, message = check_permission(username, action)
            print(message)
        
        elif choice == "4":
            username = input("Username: ")
            print(logout(username))
        
        elif choice == "5":
            username = input("Username (must be admin): ")
            success, message = view_all_users(username)
            print(message)
        
        elif choice == "6":
            print("Exiting...")
            break
        
        else:
            print("Invalid option")

# Run the module
if __name__ == "__main__":
    module_one()
