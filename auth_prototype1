from flask import Flask, render_template, request, send_file, url_for, jsonify, send_from_directory, after_this_request, current_app
from werkzeug.utils import secure_filename
from datetime import datetime
import os
import zipfile


app = Flask(__name__)

# Create a directory to hold temporary files
temp_dir = os.path.join(os.getcwd(), 'temp')
os.makedirs(temp_dir, exist_ok=True)



def encrypt_file(file_content, password, filename):
    key = password.encode('utf-8')[:16]
    key = pad(key, AES.block_size)

    original_hash = calculate_hash(file_content)
    
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(file_content, AES.block_size))
    iv = cipher.iv
    
    # File name suffix
    encrypted_file_name = f"{os.path.splitext(filename)[0]}_encrypted{os.path.splitext(filename)[1]}"
    encrypted_file_path = os.path.join(temp_dir, encrypted_file_name)
    
    with open(encrypted_file_path, 'wb') as f:
        f.write(iv + ct_bytes + original_hash.encode())
    print(f"File written to {encrypted_file_path}")
    
    return encrypted_file_path, encrypted_file_name

def decrypt_file(encrypted_content, password, filename):
    key = password.encode('utf-8')[:16]
    key = pad(key, AES.block_size)

    stored_hash = encrypted_content[-64:].decode()
    encrypted_content = encrypted_content[:-64]
    
    iv = encrypted_content[:16]
    ct_bytes = encrypted_content[16:]
    
    cipher = AES.new(key, AES.MODE_CBC, iv)
    pt = unpad(cipher.decrypt(ct_bytes), AES.block_size)
    
    decrypted_hash = calculate_hash(pt)

    if decrypted_hash != stored_hash:
        raise ValueError("File integrity compromised.")
        
    # Desuffix
    decrypted_file_name = f"{os.path.splitext(filename)[0]}_decrypted{os.path.splitext(filename)[1]}"
    decrypted_file_path = os.path.join(temp_dir, decrypted_file_name)
    
    with open(decrypted_file_path, 'wb') as f:
        f.write(pt)
    
    return decrypted_file_path, decrypted_file_name

...................................................................................................................................................................
# Function to verify password
def verify_password(password, hashed):
    return bcrypt.checkpw(password.encode('utf-8'), hashed)

# Function to generate and verify OTP (Two-Factor Authentication)
def generate_otp(secret):
    totp = pyotp.TOTP(secret)
    return totp.now()

def verify_otp(secret, user_otp):
    totp = pyotp.TOTP(secret)
    return totp.verify(user_otp)

# Check if session is still active
def is_session_active(session_expiry):
    if session_expiry is None:
        return False
    return datetime.now() < session_expiry

# Login function with authentication and TFA
def login(username, password, use_tfa=False):
    if username not in users:
        return False, "User not found"
    
    user = users[username]
    
    # Verify password
    if not verify_password(password, user["password_hash"]):
        return False, "Incorrect password"
    
    # Two-Factor Authentication (optional)
    if use_tfa:
        print(f"OTP sent: {generate_otp(user['otp_secret'])}")  # In real app, send via email/SMS
        user_otp = input("Enter OTP: ")
        if not verify_otp(user["otp_secret"], user_otp):
            return False, "Invalid OTP"
    
    # Set session expiry
    user["session_expiry"] = datetime.now() + timedelta(seconds=SESSION_TIMEOUT)
    return True, f"Logged in as {username} (Role: {user['role']})"

# Check permissions for a role
def check_permission(username, action):
    if username not in users or not is_session_active(users[username]["session_expiry"]):
        return False, "Session expired or user not logged in"
    
    role = users[username]["role"]
    if action in permissions.get(role, []):
        return True, f"Permission granted for {action}"
    return False, "Permission denied"

# Logout function
def logout(username):
    if username in users:
        users[username]["session_expiry"] = None
        return "Logged out successfully"
    return "User not found"

# Main execution
def module_one():
    print("=== User Authentication & Access Control ===")
    
    while True:
        print("\n1. Login\n2. Check Permission\n3. Logout\n4. Exit")
        choice = input("Select an option: ")
        
        if choice == "1":
            username = input("Username: ")
            password = getpass.getpass("Password: ")
            use_tfa = input("Enable Two-Factor Authentication? (y/n): ").lower() == 'y'
            success, message = login(username, password, use_tfa)
            print(message)
        
        elif choice == "2":
            username = input("Username: ")
            action = input("Action (read/write/delete): ")
            allowed, message = check_permission(username, action)
            print(message)
        
        elif choice == "3":
            username = input("Username: ")
            print(logout(username))
        
        elif choice == "4":
            print("Exiting...")
            break
        
        else:
            print("Invalid option")

# Run the module
if __name__ == "__main__":
    app.run(debug=True)
